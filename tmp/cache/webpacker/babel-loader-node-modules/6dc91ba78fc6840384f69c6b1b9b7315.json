{"ast":null,"code":"export var FETCH_ALL_USERS = 'FETCH_ALL_USERS';\nexport var GET_CURRENT_USER = 'GET_CURRENT_USER';\nexport var TOGGLE_MATCH = 'TOGGLE_MATCH';\nexport function fetchAllUsers() {\n  var csrf = document.querySelector(\"meta[name=csrf-token]\").getAttribute(\"content\");\n  var endpoint = \"http://0.0.0.0:3000/api/v1/frontend/mark_user_as_seen\";\n  var promise = fetch('/api/v1/frontend/fetch_all_users').then(function (response) {\n    return response.json();\n  });\n  return {\n    type: FETCH_ALL_USERS,\n    payload: promise\n  };\n}\nexport function toggleMatch(user_id, accepted) {\n  var csrf = document.querySelector(\"meta[name=csrf-token]\").getAttribute(\"content\");\n  var endpoint = \"http://0.0.0.0:3000/api/v1/frontend/mark_user_as_seen\";\n  var promise = fetch(endpoint, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json',\n      'X-CSRF-Token': csrf\n    },\n    'body': JSON.stringify({\n      user_id: user_id,\n      accepted: accepted\n    })\n  }).then(function (response) {\n    return response.json();\n  });\n  return {\n    type: TOGGLE_MATCH,\n    payload: promise\n  };\n} // POSTS ACTIONS\n\nexport var FETCH_POSTS = 'FETCH_POSTS';\nexport var FETCH_POST = 'FETCH_POST';\nexport var POST_CREATED = 'POST_CREATED';\nvar ROOT_URL = 'http://reduxblog.herokuapp.com/api/posts';\nvar API_KEY = 'LEWAGON-BLOG'; // old api request code: fetch(`${ROOT_URL}?key=${API_KEY}`)\n\nexport function fetchPosts() {\n  var promise = fetch('/api/v1/posts').then(function (response) {\n    return response.json();\n  });\n  return {\n    type: FETCH_POSTS,\n    payload: promise\n  };\n}\nexport function fetchPost(id) {\n  var promise = fetch(\"/api/v1/posts/\".concat(id)).then(function (response) {\n    return response.json();\n  });\n  return {\n    type: FETCH_POST,\n    payload: promise\n  };\n}\nexport function createPost(body, callback) {\n  var csrf = document.querySelector(\"meta[name=csrf-token]\").getAttribute(\"content\");\n  var request = fetch('/api/v1/posts', {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'X-CSRF-Token': csrf\n    },\n    body: JSON.stringify(body)\n  }).then(function (response) {\n    return response.json();\n  }).then(callback);\n  return {\n    type: POST_CREATED,\n    payload: request\n  };\n}","map":{"version":3,"sources":["/Users/richardjarram/code/catonmat/tea-fullstack/app/javascript/frontend/src/actions/index.js"],"names":["FETCH_ALL_USERS","GET_CURRENT_USER","TOGGLE_MATCH","fetchAllUsers","csrf","document","querySelector","getAttribute","endpoint","promise","fetch","then","response","json","type","payload","toggleMatch","user_id","accepted","method","headers","JSON","stringify","FETCH_POSTS","FETCH_POST","POST_CREATED","ROOT_URL","API_KEY","fetchPosts","fetchPost","id","createPost","body","callback","request"],"mappings":"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","sourcesContent":["export const FETCH_ALL_USERS = 'FETCH_ALL_USERS';\nexport const GET_CURRENT_USER = 'GET_CURRENT_USER';\nexport const TOGGLE_MATCH = 'TOGGLE_MATCH';\n\nexport function fetchAllUsers() {\n  const csrf = document.querySelector(\"meta[name=csrf-token]\").getAttribute(\"content\");\n  const endpoint = `http://0.0.0.0:3000/api/v1/frontend/mark_user_as_seen`;\n  const promise = fetch('/api/v1/frontend/fetch_all_users')\n  .then(response => response.json());\n\n  return {\n    type: FETCH_ALL_USERS,\n    payload: promise\n  };\n}\n\nexport function toggleMatch(user_id, accepted) {\n  const csrf = document.querySelector(\"meta[name=csrf-token]\").getAttribute(\"content\");\n  const endpoint = `http://0.0.0.0:3000/api/v1/frontend/mark_user_as_seen`;\n  const promise = fetch(endpoint, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'X-CSRF-Token': csrf\n      },\n      'body': JSON.stringify({\n        user_id: user_id,\n        accepted: accepted\n      })\n    })\n  .then(response => response.json())\n\n  return {\n    type: TOGGLE_MATCH,\n    payload: promise\n  };\n}\n\n\n\n\n// POSTS ACTIONS\nexport const FETCH_POSTS = 'FETCH_POSTS';\nexport const FETCH_POST = 'FETCH_POST';\nexport const POST_CREATED = 'POST_CREATED';\nconst ROOT_URL = 'http://reduxblog.herokuapp.com/api/posts';\nconst API_KEY = 'LEWAGON-BLOG';\n// old api request code: fetch(`${ROOT_URL}?key=${API_KEY}`)\n\nexport function fetchPosts() {\n  const promise = fetch('/api/v1/posts')\n  .then(response => response.json());\n\n  return {\n    type: FETCH_POSTS,\n    payload: promise\n  };\n}\n\nexport function fetchPost(id) {\n  const promise = fetch(`/api/v1/posts/${id}`)\n  .then(response => response.json());\n\n  return {\n    type: FETCH_POST,\n    payload: promise\n  };\n}\n\nexport function createPost(body, callback) {\n  const csrf = document.querySelector(\"meta[name=csrf-token]\").getAttribute(\"content\");\n  const request = fetch('/api/v1/posts', {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'X-CSRF-Token': csrf\n    },\n    body: JSON.stringify(body)\n  }).then(response => response.json())\n    .then(callback);\n\n  return {\n    type: POST_CREATED,\n    payload: request\n  };\n}\n"]},"metadata":{},"sourceType":"module"}