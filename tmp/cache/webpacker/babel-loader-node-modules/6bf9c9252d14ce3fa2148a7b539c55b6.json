{"ast":null,"code":"var _jsxFileName = \"/Users/richardjarram/code/catonmat/tea-fullstack/app/javascript/frontend/src/views/chatroom/chatroom.jsx\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (typeof call === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n// Core React and style\nimport React, { Component } from 'react';\nimport './style.scss'; //Components\n\nimport NavBar from '../../components/navbar/navbar.jsx';\nimport MessageList from './message_list.jsx'; // Redux\n\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { Link } from 'react-router-dom';\nimport _ from 'lodash'; // Actions\n\nimport { fetchAllUsers } from '../../actions/index.js';\n\nvar ChatRoom =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ChatRoom, _Component);\n\n  function ChatRoom(props) {\n    _classCallCheck(this, ChatRoom);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ChatRoom).call(this, props));\n  }\n\n  _createClass(ChatRoom, [{\n    key: \"renderMessageList\",\n    value: function renderMessageList() {\n      return _.map(this.props.users, function (user, index) {\n        if (true) {\n          return React.createElement(\"div\", {\n            className: \"message-container\",\n            key: index + 1,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 24\n            },\n            __self: this\n          }, React.createElement(\"p\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 25\n            },\n            __self: this\n          }, \"Info on the person like their image\"), React.createElement(\"p\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 26\n            },\n            __self: this\n          }, user.about_me), React.createElement(Link, {\n            to: \"/chat_room/\".concat(user.id),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 27\n            },\n            __self: this\n          }, \"ChatRoom\")); //<MessageList matchedUsers={this.props.users.filter(user => user.matched === true)}/>\n        } else {\n          return React.createElement(\"p\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 32\n            },\n            __self: this\n          }, \" No messages\");\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"chatroom\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, React.createElement(NavBar, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }), React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, \"Chatroom\"), this.renderMessageList());\n    }\n  }]);\n\n  return ChatRoom;\n}(Component);\n\nfunction mapStateToProps(state) {\n  return {\n    conversations: state.conversations,\n    users: state.users\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    fetchAllUsers: fetchAllUsers\n  }, dispatch);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChatRoom);","map":{"version":3,"sources":["/Users/richardjarram/code/catonmat/tea-fullstack/app/javascript/frontend/src/views/chatroom/chatroom.jsx"],"names":["React","Component","NavBar","MessageList","connect","bindActionCreators","Link","_","fetchAllUsers","ChatRoom","props","map","users","user","index","about_me","id","renderMessageList","mapStateToProps","state","conversations","mapDispatchToProps","dispatch"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,cAAP,C,CACA;;AACA,OAAOC,MAAP,MAAmB,oCAAnB;AACA,OAAOC,WAAP,MAAwB,oBAAxB,C,CACA;;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,CAAP,MAAc,QAAd,C,CACA;;AACA,SAASC,aAAT,QAA8B,wBAA9B;;IAEMC,Q;;;;;AACJ,oBAAYC,KAAZ,EAAmB;AAAA;;AAAA,iFACXA,KADW;AAElB;;;;wCAEmB;AAClB,aAAOH,CAAC,CAACI,GAAF,CAAM,KAAKD,KAAL,CAAWE,KAAjB,EAAwB,UAACC,IAAD,EAAOC,KAAP,EAAiB;AAC9C,YAAI,IAAJ,EAAU;AACR,iBACE;AAAK,YAAA,SAAS,EAAC,mBAAf;AAAmC,YAAA,GAAG,EAAEA,KAAK,GAAC,CAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mDADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAID,IAAI,CAACE,QAAT,CAFJ,EAGI,oBAAC,IAAD;AAAM,YAAA,EAAE,uBAAgBF,IAAI,CAACG,EAArB,CAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAHJ,CADF,CADQ,CAQR;AACD,SATD,MASO;AACL,iBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAP;AACD;AACF,OAbM,CAAP;AAcD;;;6BAEQ;AACP,aACE;AAAK,QAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFF,EAGG,KAAKC,iBAAL,EAHH,CADF;AAQD;;;;EA/BoBhB,S;;AAkCvB,SAASiB,eAAT,CAAyBC,KAAzB,EAAgC;AAC9B,SAAO;AACLC,IAAAA,aAAa,EAAED,KAAK,CAACC,aADhB;AAELR,IAAAA,KAAK,EAAEO,KAAK,CAACP;AAFR,GAAP;AAID;;AAED,SAASS,kBAAT,CAA4BC,QAA5B,EAAsC;AACpC,SAAOjB,kBAAkB,CAAC;AAAEG,IAAAA,aAAa,EAAbA;AAAF,GAAD,EAAoBc,QAApB,CAAzB;AACD;;AAED,eAAelB,OAAO,CAACc,eAAD,EAAkBG,kBAAlB,CAAP,CAA6CZ,QAA7C,CAAf","sourcesContent":["// Core React and style\nimport React, { Component } from 'react';\nimport './style.scss';\n//Components\nimport NavBar from '../../components/navbar/navbar.jsx';\nimport MessageList from './message_list.jsx';\n// Redux\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { Link } from 'react-router-dom';\nimport _ from 'lodash';\n// Actions\nimport { fetchAllUsers } from '../../actions/index.js';\n\nclass ChatRoom extends Component {\n  constructor(props) {\n    super(props)\n  }\n\n  renderMessageList() {\n    return _.map(this.props.users, (user, index) => {\n      if (true) {\n        return(\n          <div className=\"message-container\" key={index+1}>\n              <p>Info on the person like their image</p>\n              <p>{user.about_me}</p>\n              <Link to={`/chat_room/${user.id}`}>ChatRoom</Link>\n          </div>\n        )\n        //<MessageList matchedUsers={this.props.users.filter(user => user.matched === true)}/>\n      } else {\n        return <p> No messages</p>\n      }\n    })\n  }\n\n  render() {\n    return(\n      <div className=\"chatroom\">\n        <NavBar/>\n        <h1>Chatroom</h1>\n        {this.renderMessageList()}\n\n      </div>\n    )\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    conversations: state.conversations,\n    users: state.users\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({ fetchAllUsers }, dispatch);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChatRoom);\n"]},"metadata":{},"sourceType":"module"}